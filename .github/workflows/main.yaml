name: CI

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
jobs:
  code_testing: 
    runs-on: ubuntu-latest
    steps: 
      - uses: actions/checkout@v4 

      - name: Check if poetry is installed, install if is not present
        run: |
          chmod +x scripts/check_poetry.sh
          ./scripts/check_poetry.sh

      - name: Check poetry
        run: poetry --version

      - name: Poetry Config
        run: poetry config virtualenvs.create false

      # - name: Get required python version
      #   run: |
      #     chmod +x scripts/check_python.sh
      #     ./scripts/check_python.sh

      - name: Install python
        run: sudo apt-get install python3.11

      # - name: Set installed python as default
      #   run: |
      #     sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.11
      #     sudo update-alternatives --config python
      
      - name: Install dependencies
        run: |
          poetry config virtualenvs.create true
          poetry install --no-dev

      - name: Install pytest
        run: pip install pytest

      - name: Run code test
        run: pytest tests/test_loading.py
         
      # - name: sudo apt-get install libsasl2-dev python-dev-is-python3 libldap2-dev libssl-dev
      #   run: sudo apt-get install libsasl2-dev python-dev-is-python3 libldap2-dev libssl-dev -y

      # - name: pip install setuptools wheel
      #   run: pip install setuptools wheel

      # - name: pip install --upgrade pip
      #   run: pip install --upgrade pip

      # - name: pip install pytest
      #   run: pip install pytest

      # - name: Run tests
      #   run: pytest tests/test_loading.py

  build: 
#    needs: [code_testing]
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: docker login
        env: 
          DOCKER_USERNAME: ${{secrets.DOCKER_USERNAME}}
          DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
        run:
          docker login -u DOCKER_USERNAME -p DOCKER_PASSWORD
           
      - name: Build Docker image 
        run: docker build -t fastapi .

      - name: Docker Push image 
        run: docker push ${{secrets.DOCKER_USERNAME}}/fastapi
        
  test:
    runs-on: ubuntu-latest
#    needs: build
    steps:
      - uses: actions/checkout@v4 

      - name: Download Docker image 
        uses: actions/download-artifact@v4
        with:
          name: fastapi

      - name: Load Docker image  
        run: docker run -p 8000:8000 fastapi
      
      - name: Check running containers
        run: curl -v http://0.0.0.0:8000/docs

      - name: Ckeck endpoint terms
        run: curl -v http://0.0.0.0:8000/terms

      - name: Ckeck endpoint definitions
        run: curl -v http://0.0.0.0:8000/definitions

      - name: Push image to Docker Hub or alternatives
        run: docker push rockodilu/fastapi 

  # deploy: 
  #   needs: [ test ]
  #   runs-on: ubuntu-latest
  #   environment: deployment
  #   env:
  #     AWS_REGION: MY_AWS_REGION                  
  #     ECR_REPOSITORY: MY_ECR_REPOSITORY          
  #     ECS_SERVICE: MY_ECS_SERVICE                
  #     ECS_CLUSTER: MY_ECS_CLUSTER                
  #     ECS_TASK_DEFINITION: MY_ECS_TASK_DEFINITION 
  #   steps: 
  #     - uses: actions/checkout@v4     
                                                 
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ env.AWS_REGION }}
  
  #     - name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v4
  
  #     - name: Build, tag, and push image to Amazon ECR
  #       id: build-image
  #       env:
  #         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
  #         ECR_REPOSITORY: my-ecr-repo
  #         IMAGE_TAG: ${{ github.sha }}
  #       run: |
  #         docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
  #         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  #         echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
  
  #     - name: Fill in the new image ID in the Amazon ECS task definition
  #       id: task-def
  #       uses: aws-actions/amazon-ecs-render-task-definition@v4
  #       with:
  #         task-definition: ${{ env.ECS_TASK_DEFINITION }}
  #         container-name: ${{ env.CONTAINER_NAME }}
  #         image: ${{ steps.build-image.outputs.image }}
  
  #     - name: Deploy Amazon ECS task definition
  #       uses: aws-actions/amazon-ecs-deploy-task-definition@v4
  #       with:
  #         task-definition: ${{ steps.task-def.outputs.task-definition }}
  #         service: ${{ env.ECS_SERVICE }}
  #         cluster: ${{ env.ECS_CLUSTER }}
  #         wait-for-service-stability: true