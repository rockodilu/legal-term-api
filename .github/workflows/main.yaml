name: CI

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
jobs:
  code_testing: # create job for code_testing
    runs-on: ubuntu-latest
    steps: 
      - uses: actions/checkout@v3 # run ./tests/test_loading.py

      - name: Check if poetry is installed, install if is not present
        run: |
          chmod +x scripts/check_poetry.sh
          ./scripts/check_poetry.sh

      - name: Check poetry
        run: poetry --version

      - name: Install dependencies
        run: poetry install

      - name: Run code test
        run: pytest tests/test_loading.py
         
      # - name: sudo apt-get install libsasl2-dev python-dev-is-python3 libldap2-dev libssl-dev
      #   run: sudo apt-get install libsasl2-dev python-dev-is-python3 libldap2-dev libssl-dev -y

      # - name: pip install setuptools wheel
      #   run: pip install setuptools wheel

      # - name: pip install --upgrade pip
      #   run: pip install --upgrade pip

      # - name: pip install pytest
      #   run: pip install pytest

      # - name: Run tests
      #   run: pytest tests/test_loading.py

#   build: 
#     needs: [code_testing]
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v3 # It gives access to repository

#       - name: Build Docker image # Builds the image from the repo
#         run: docker build -t fastapi .

#       - name: Save Docker image # Save inage
#         run: docker save fastapi | gzip > fastapi.tar.gz

#       - name: Check is file exists
#         run: test -f fastapi.tar.gz

#       - name: Upload Docker image # Upload image to artifacts
#         uses: actions/upload-artifact@v3
#         with:
#           name: fastapi
#           path: fastapi.tar.gz  # build and push: STOP

#   test:
#     runs-on: ubuntu-latest
#     needs: build
#     steps:
#       - uses: actions/checkout@v3 

#       - name: Download Docker image #  use Docker Hub or ECR
#         uses: actions/download-artifact@v3
#         with:
#           name: fastapi

#       - name: Load Docker image  #use Docker Hub or ECR
#         run: docker run -p 8000:8000 fastapi
     
#       - name: Check running containers
#         run: curl -v http://0.0.0.0:8000/docs

#       - name: Ckeck endpoint terms
#         run: curl -v http://0.0.0.0:8000/terms

#       - name: Ckeck endpoint definitions
#         run: curl -v http://0.0.0.0:8000/definitions

#       - name: Push image to Docker Hub or alternatives
#         run: docker push ${{ var.DOCKER_USERNAME }}/fastapi # image name or variable 

#   deploy:  # action for kubernetes deployment (AWS)
#     needs: [ test ]
#     runs-on: ubuntu-latest
#     steps: 
#       - uses: actions/checkout@v3

#       - name: Download Docker image
#         uses: actions/download-artifact@v3
#         with:
#           name: fastapi 

#       - name: Deploy to Kubernetes
#         run: kubectl apply -f kubernetes/deployment.yaml
        
# ###### check action to deploy to kubernetes ce am nevoie? username, parola, etc